---
title: "Karite genetic parameters"
author: "Karen Cristine Goncalves dos Santos"
date: "`r Sys.Date()`"
output: 

  pdf_document:
    fig_caption: yes
    keep_tex: yes
---

```{r Load packages, include=FALSE}
packages_to_use = c(
	"poppr", "mmod", "adegenet", "ape", "LEA",
	"treemap", "tidyverse",
	"vcfR", "pegas", "hierfstat",
	"ggpubr")

# install.packages(packages_to_use,
# 								 dependencies = TRUE)
for (i in packages_to_use) { 
	library(i, character.only = T)}
```

```{r Load pop info, eval=FALSE, message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
population_information <- read.csv(file = "input data - DO NOT MODIFY/Population.csv")
names(population_information) <- c("Taxa", "Taxa.Name", "Country",
																	 "Region", "Location.Population",
																	 "Type.Land.Use")

population_information = 
	population_information[- which(is.na(population_information$Taxa)),]

```

The file  here was processed with STACKS with the following filters:
#     min_cov: minimum allele coverage to keep genotype <int>: 3
#     percent_genotypes: minimum percent of genotype data per population <float> : 50
#     max_pop_fail: maximum number of populations that can fail percent_genotypes <int> : 0
#     min_mas: minimum number of samples with rare allele <int> : 2

```{r eval=FALSE, message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
vcf = read.vcfR("input/third_filters_m3_p50_x0_S2.singleton.unlinked_100k.vcf")
genind = vcfR2genind(vcf, sep = "/")
popinfo = read.delim("input/Population.txt", header = T)
popmap = unique(popinfo[, 2:5])

inds_info <- rownames(tab(genind))
sep_info <- data.frame(
  ind = inds_info,
  Country = gsub("(\\w{3}).+", "\\1", inds_info),
  Region = gsub("\\w{4}\\d-(\\w+)_.+", "\\1", inds_info),
  Locality = gsub("\\w{4}\\d-(\\w+)_.+", "\\1", inds_info),
  Land_use = gsub("\\w{4}\\d-\\w+_(\\w{2}).+", "\\1", inds_info),
  sample = gsub("\\w{4}\\d-\\w+_\\w{2}-pl\\d+-[A-H][0-9]+-(\\d+)", "\\1", inds_info)
)

true_names = list(
  Country = c("Cameroun", "Mali", "Tchad"),
  Region = c(rep("Extreme-North", 3), rep("North", 3),
             rep("Adamaoua", 3), rep("West", 4),
             "Segou", "Moyen-Chari", "Logone Occidental",
             "Mandoul", "Logone Oriental", "Mayo-kebbi", "Mandoul", 
             "Tandjile"),
  Locality = c("Mayo-Dana", "Mayo-Kani", "Mayo-Tsana", "Bascheo",
               "Ngong", "Tcheboa", "Falaise", "Tchabal", "Tison",
               "Bangoua", "Koutaba", "Mbouda", "Tonga", "Solosso",
               "Kagala", "Kana", "Kemkiam", "Mayongo", "Pala",
               "Peni", "Tchoua"),
  Land_use = c("Champ agricole", "Savane naturelle", 'Jardin de case',
               "Champ", "Jachere", "Verger", "Foret")
)

for (i in names(true_names)) {
  names(true_names[[i]]) = unique(sep_info[, i])
}

new_popmap = matrix(nrow = 0, ncol = 5) %>% as.data.frame()
names(new_popmap) = c("Sample", names(true_names))

for (i in 1:nrow(sep_info)) {
  ind_data = data.frame(
    Sample = sep_info$sample[i],
    Country = true_names[["Country"]][
      sep_info[i, "Country"]
    ],
    Region = true_names[["Region"]][
      sep_info[i, "Region"]
    ],
    Locality = true_names[["Locality"]][
      sep_info[i, "Locality"]
    ],
    Land_use = true_names[["Land_use"]][
      sep_info[i, "Land_use"]
    ])
  
  new_popmap = data.frame(
    rbind(new_popmap, ind_data)
  )
}
```

```{r eval=FALSE, message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
strata(genind) <- new_popmap
setPop(genind) <- ~Country/Region/Locality

save(genind, new_popmap, sep_info, file = "basic_genind.RData")
```

```{r}
rm(list=ls())
load("basic_genind.RData")
groups <- with(population_information, 
							 list(countries = unique(Country),
							 		 regions = unique(Region),
							 		 populations = unique(Locality),
							 		 use = unique(Land_use)))

```

```{r Pairwise Fst}
pwfst <- genet.dist(genind, diploid = T, method = "Fst")
nj_fst <- pwfst %>% nj()
nj_fst$edge.length <- abs(nj_fst$edge.length)
nj_fst$tip.label <- 
	levels(pop(genind)) %>%
	gsub(pattern = "_", replacement = " - ")

pwfst_df <- as.matrix(pwfst) %>% 
	as.data.frame()
names(pwfst_df) <- rownames(pwfst_df) <- 
	levels(pop(genind))

dend_pwfst <- hclust(pwfst_df %>% as.matrix %>% as.dist)
pops_countries <- dend_pwfst$labels %>% 
	str_split(pattern = "_") %>% 
	lapply(function(x) x[1]) %>%
	unlist %>% as.factor
```


```{r Pairwise Fst dend plot}
library(ggdendro)

ggdend_pwfst <- as.dendrogram(dend_pwfst) %>%
	dendro_data()

ggdend_pwfst$labels$label <- 
	gsub("_", " - ", ggdend_pwfst$labels$label)

ggdend_pwfst$labels$country <- 
	ggdend_pwfst$labels$label %>% str_split(pattern = " ") %>%
	lapply(function(x) x[1]) %>% unlist %>% as.factor 

ggplot() +
    geom_segment(data = ggdend_pwfst$segments, 
                 aes(x = y, y = x, 
                     xend = yend, yend = xend))+
    geom_text(data = ggdend_pwfst$labels, 
              aes(y, x, label = label, color = country),
              hjust = 1.1, size = 3) +
    scale_x_continuous(
    	limits = c(-0.25, 0.18), 
    	breaks = seq(0, 0.2, 0.05)) + 
	theme_minimal() + 
	theme(axis.text.y = element_blank(), 
				panel.grid = element_blank()) + 
	labs(x = "Pairwise Fst", y = "")

ggsave(paste0("Reference_snps_PairwiseFST_njtree.pdf"))
knitr::kable(pwfst_df, digits = 3)
```

```{r summary per country}
country_genind <- genind
setPop(country_genind) <-
	~Country

genetic_summary_countries <- 
	lapply(groups$countries, function(x) {
	inds <- pop(country_genind) == x
	
	basic.stats(country_genind[inds])
})

names(genetic_summary_countries) <- groups$countries


exp_het_countries <- adegenet::Hs(country_genind, 
																	pop = pop(country_genind))

sapply(groups$countries, function(x) {
	genetic_summary_countries[[x]]$overall[c("Ho", "Hs", "Ht", "Fis")]
}) %>% t() %>% data.frame()

exp_het_countries
```


```{r summary per pop}
genetic_summary <- lapply(levels(pop(genind)), function(x) {
	inds <- pop(genind) == x
	
	basic.stats(genind[inds], diploid = T)
})
names(genetic_summary) <- levels(pop(genind))


gen_summ_pops <- 
	sapply(levels(pop(genind)), function(x) {
		genetic_summary[[x]]$overall[c("Ho", "Hs", "Ht", "Fis")]
	}) %>% t() %>% data.frame()

exp_het <- adegenet::Hs(genind, pop = pop(genind))

exp_het_countries_mean <- 
	sapply(groups$countries, function(x) {
	a = exp_het[grep(x, levels(pop(genind)))] 
	c(mean = mean(a), std = sd(a))
})

fis_countries_mean <- sapply(groups$countries, function(x) {
	a = gen_summ_pops$Fis[grep(x, levels(pop(genind)))] 
	c(mean = mean(a), std = sd(a))
})
exp_het_countries_mean
fis_countries_mean
```

```{r Amova with Mali}
amova_mali <- poppr.amova(x = genind, within = F,
													hier = ~Country/Region/Locality,
													threads = parallel::detectCores(), cutoff = 0.95
)

(rand_amova_mali <- randtest(amova_mali, nrepet = 999))

plot(rand_amova_mali)

knitr::kable(amova_mali$results, caption = 
						 	"Result AMOVA including the Mali population.\
						 Hierarchy: _Country - Region - Locality_.\
						 Sample = Location.Population")

knitr::kable(amova_mali$componentsofcovariance, caption = 
						 	"Components of covariance from AMOVA including the Mali population.\
						 Hierarchy: _Country - Region - Locality_.\
						 Sample = Location.Population")
```


```{r Amova without Mali}
exclude_mali <- population_information$inds[
	population_information$Country != "Mali"]

genind_nomali <- genind[exclude_mali]
strata(genind_nomali) <- population_information[
	population_information$Country != "Mali",] %>%
	apply(MARGIN = 2, FUN = as.character) %>% as.data.frame
setPop(genind_nomali) <-
	~Country/Region/Locality

amova_nomali <- poppr.amova(x = genind_nomali, within = F,
														hier = ~Country/Region/Locality,
														threads = parallel::detectCores(), cutoff = 0.95
)

(rand_amova_nomali <- randtest(amova_nomali, nrepet = 999))

plot(rand_amova_nomali)

knitr::kable(amova_nomali$results, caption = 
						 	"Result AMOVA excluding the Mali population.\
						 Hierarchy: _Country - Region - Locality_.\
						 Sample = Location.Population")

```

```{r glPCA, eval=FALSE, include=FALSE}
genlight <- vcfR2genlight(vcf, n.cores = parallel::detectCores())

glPCA_result <- glPca(
	genlight, parallel = T, nf = 20,
	n.cores = parallel::detectCores()
)

glPCA_df <- data.frame(
	Taxa.Name = rownames(glPCA_result$scores),
	glPCA_result$scores
) %>% merge(population_information[, -1], by = "inds") 

#devtools::install_github("jaredhuling/jcolors")
library("jcolors")

ggplot(glPCA_df, 
			 aes(PC1, PC2,shape = Country, color = Region)) +
	geom_point() + scale_color_jcolors(palette = "pal8")
```
# DAPC

## DAPC using clusters obtained with find.clusters function

```{r DAPC with find.clusters, echo=FALSE}
theme_set(theme_bw())
strata(genind) <- population_information
setPop(genind) <-
	~Country/Region/Locality

maxK <- 20
myMat <- matrix(nrow=10, ncol=maxK)
colnames(myMat) <- 1:ncol(myMat)
for(i in 1:nrow(myMat)){
  grp <- find.clusters(genind, n.pca = 490, 
  										 choose.n.clust = FALSE,  max.n.clust = maxK)
  myMat[i,] <- grp$Kstat
}

myMat <- as.data.frame(myMat)
myMat$Group = 1:nrow(myMat)
my_df <- pivot_longer(myMat, cols = !Group, names_to = "K", values_to = "BIC")
my_df$Group <- factor(my_df$Group, levels = 1:10)
my_df$K <- factor(my_df$K, levels = 1:20)
head(my_df)

p1 <- ggplot(my_df, aes(x = K, y = BIC))
p1 <- p1 + geom_boxplot() + 
p1 <- p1 + theme_bw()
p1 <- p1 + xlab("Number of groups (K)")
p1

mean_BIC <- apply(myMat[, -21], 2, mean)
nK = (mean_BIC == min(mean_BIC)) %>% which


```


```{r DAPC with find.clusters, echo=FALSE}
clusters_karite <- find.clusters(
    genind, n.pca = 490, stat = "BIC",
    method = "ward", n.clust = nK)

table(pop(genind), clusters_karite$grp)
											 
table.value(
	table(population_information$Country, clusters_karite$grp),
	col.labels = paste("K ", levels(clusters_karite$grp)))

dapc_countries <- dapc(genind, 
											 clusters_karite$grp, 
											 n.pca = 90, n.da = 40)


dapc_da <- data.frame(
	population_information[, 2:5],
	clusters = dapc_countries$grp,
	dapc_countries$ind.coord
)
```


```{r DAPC scatter plot, echo=FALSE}
library(gridExtra)
library(RColorBrewer)
library(pals)

theme_set(theme_bw())
scatter_dapc <- list(
	eigen = (data.frame(
		DAs = factor(paste0("Discriminant function ", 1:dapc_countries$n.da),
								 levels = paste0("Discriminant function ", 1:dapc_countries$n.da)),
		eigenvalues = dapc_countries$eig) %>%
			ggplot(aes(DAs, eigenvalues, fill = eigenvalues)) +
			geom_col() + 
			labs(x = "", y = "Eigenvalues", 
					 title = "Eigenvalues of retained discriminant functions") +
			#scale_y_continuous(breaks = seq(0, 6000, 1000)) +
			theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
						legend.position = "none")
	), 
	ld1_ld2 =
		(ggplot(dapc_da, aes(LD1, LD2, color = clusters)) + 
		 	geom_point(aes(shape = Country)) + 
		 	stat_ellipse(aes(color = clusters)) +
		 	labs(x = "DAPC LD1", y = "DAPC LD2") +
		 	scale_color_manual(values = pals::glasbey(nK))),
	ld1_ld3 =
		(ggplot(dapc_da, aes(LD1, LD3, color = clusters)) + 
		 	geom_point(aes(shape = Country)) + 
		 	stat_ellipse(aes(color = clusters)) +
		 	labs(x = "DAPC LD1", y = "DAPC LD3") +
		 	scale_color_manual(values = pals::glasbey(nK))),
	ld2_ld3 =
		(ggplot(dapc_da, aes(LD2, LD3, color = clusters)) + 
		 	geom_point(aes(shape = Country)) + 
		 	stat_ellipse(aes(color = clusters)) +
		 	labs(x = "DAPC LD2", y = "DAPC LD3") +
		 	scale_color_manual(values = pals::glasbey(nK)))
)

ggsave(
   filename = paste0("ReferenceSNP_Scatters_DAPC_findclusters", Sys.Date(), ".pdf"), 
   plot = marrangeGrob(scatter_dapc, nrow=1, ncol=1)
)

```

```{r DAPC PCA plot}
data.frame(inds = population_information$inds, 
           grp = dapc_countries$grp, 
           Country = population_information$Country,
           PC1 = dapc_countries$tab$`PCA-pc.1`, 
           PC2 = dapc_countries$tab$`PCA-pc.2`) %>% 
ggplot(aes(PC1, PC2, color = grp, shape = Country)) + geom_point() +
    scale_color_manual(values = pals::glasbey(nK))


ggsave(
   filename = paste0("ReferenceSNP_PCA_DAPC_findclusters", Sys.Date(), ".pdf")
)

```


```{r Structure-like plot - findclusters, fig.width=13.9, fig.height=7.21}
setPop(genind) <- ~Country/Region/Locality
membership_probability = data.frame(
	individuals = rownames(dapc_countries[["posterior"]]),
	dapc_countries[["posterior"]]
) %>% merge(
	data.frame(individuals = population_information$inds,
						 pops = as.character(pop(genind))),
	by = "individuals") %>%
	pivot_longer(
	-c(individuals, pops), names_to = "Clusters", 
	values_to = "probability", names_prefix = "X")

membership_probability$individuals <- 
	factor(membership_probability$individuals,
				 levels = population_information$inds[
				 	order(population_information$inds)])

mem_prob_pops <- lapply(levels(pop(genind)), function(i) {
		title = paste0(
			i, "\nN=", which(pop(genind) == i) %>% length
		)
		filter(membership_probability, pops == i) %>%
		ggplot(
       aes(individuals, probability, fill = Clusters)) +
    geom_col() + labs(x = "", y = "",
    									title = title) +
    scale_fill_manual(values = glasbey(nK), breaks = 1:nK) +
    theme(axis.text.x = element_blank(),
          axis.ticks.x = element_blank(),
    			axis.title.y = element_text(vjust = 0.5),
          panel.grid = element_blank(), 
    			plot.title = element_text(hjust = 0.5)
    			)
	})

plot_groups <- list(
	ggarrange(plotlist = lapply(1:6, function(i) {mem_prob_pops[[i]]}),
					ncol = 2, nrow = 3, labels = "AUTO", 
					common.legend = T, legend = "bottom"),
	ggarrange(plotlist = lapply(7:12, function(i) {mem_prob_pops[[i]]}),
					ncol = 2, nrow = 3, labels = "AUTO", 
					common.legend = T, legend = "bottom"),
	ggarrange(plotlist = lapply(13:18, function(i) {mem_prob_pops[[i]]}),
					ncol = 2, nrow = 3, labels = "AUTO", 
					common.legend = T, legend = "bottom"),
	ggarrange(plotlist = lapply(19:21, function(i) {mem_prob_pops[[i]]}),
					ncol = 1, nrow = 3, labels = "AUTO", 
					common.legend = T, legend = "bottom"))
library(gridExtra)

ggsave(
	filename = paste0("ReferenceSNP_Cluster_membership_DAPC_DA10_PC90_k", nK, Sys.Date(), ".pdf"), 
   plot = marrangeGrob(plot_groups, nrow=1, ncol=1)
)

```

```{r poppr}
poppr_idx <- 
	lapply(levels(pop(genind)), function(x) {
		poppr(genind, sublist = x, hist = T)
	})

poppr_idx_df <- sapply(1:length(poppr_idx), function(x) {
	a = as.data.frame(poppr_idx[[x]]) 
	names(a) <- names(poppr_idx[[x]])
	a
})  %>% t() 

```
```{r summary per pop}
genetic_summary <- lapply(levels(pop(genind)), function(x) {
	inds <- pop(genind) == x
	
	basic.stats(genind[inds], diploid = T)
})
names(genetic_summary) <- levels(pop(genind))


gen_summ_pops <- 
	sapply(levels(pop(genind)), function(x) {
		genetic_summary[[x]]$overall[c("Ho", "Hs", "Ht", "Fis")]
	}) %>% t() %>% data.frame()

exp_het <- adegenet::Hs(genind, pop = pop(genind))
exp_het_countries_mean <- 
	sapply(groups$countries, function(x) {
	a = exp_het[grep(x, levels(pop(genind)))] 
	c(mean = mean(a), std = sd(a))
})

fis_countries_mean <- sapply(groups$countries, function(x) {
	a = gen_summ_pops$Fis[grep(x, levels(pop(genind)))] 
	c(mean = mean(a), std = sd(a))
})

```

```{r}
library("vegan")
mon.tab <- mlg.table(genind, plot = FALSE)
min_sample <- min(rowSums(mon.tab))
rarecurve(mon.tab, sample = min_sample, xlab = "Sample Size", ylab = "Expected MLGs")
title("Rarefaction of Fruit Rot and Blossom Blight")
```

```{r}
dna <- read.dna("input data - DO NOT MODIFY/GCA_019916065.1_ASM1991606v1_genomic.fna", 
								format = "fasta")

gff <- read.table("input data - DO NOT MODIFY/Vitpa_all.gff", 
									sep = "\t", quote = "", header = F)

correlations <- read.txt("input data - DO NOT MODIFY/correlations_vcf_assem.txt", header = F)
names(correlations) = c("assembly", "vcf")

for (i in 1:nrow(correlations)) {
	gff$V1 = gsub(correlations$assembly[i], correlations$vcf[i], gff$V1)
	gff$V9 = gsub(correlations$assembly[i], correlations$vcf[i], gff$V9)
}

chrom <- create.chromR(name='Supercontig', vcf=vcf, seq=dna, ann=gff)

plot(chrom)

msk_chrom <- masker(chrom, min_QUAL = 1, min_DP = 300, 
										max_DP = 700, min_MQ = 59.9,  max_MQ = 60.1)

plot(msk_chrom)

chromoqc(chrom, dp.alpha=20)

head(chrom@var.info)

plot(chrom)

```

```{r}
pop <- pop(genind)
myDiff <- genetic_diff(vcf, pops = pop, method = 'nei')
knitr::kable(head(myDiff[,1:15]))
```

